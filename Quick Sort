def swap(arr, i, j)
  arr[i], arr[j] = arr[j], arr[i]
end

def partition(arr, low, high)
  pivot = arr[high] # pivot element
  i = low - 1       # index of smaller element

  for j in low...high
    # If current element is smaller than or equal to pivot
    if arr[j] <= pivot
      i += 1 # increment index of smaller element
      swap(arr, i, j)
    end
  end
  swap(arr, i + 1, high)
  return i + 1
end

def quick_sort(arr, low, high)
  if low < high
    # pi is partitioning index, arr[pi] is now at right place
    pi = partition(arr, low, high)

    # Separately sort elements before partition and after partition
    quick_sort(arr, low, pi - 1)
    quick_sort(arr, pi + 1, high)
  end
end

def print_array(arr)
  arr.each { |e| print "#{e} " }
  puts
end

# Example usage
arr = [10, 7, 8, 9, 1, 5]
n = arr.length
quick_sort(arr, 0, n - 1)
puts "Sorted array:"
print_array(arr)
